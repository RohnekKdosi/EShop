// <auto-generated />
using System;
using EShop.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EShop.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200404093806_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EShop.Data.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentifierName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentID")
                        .HasColumnType("int");

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ParentID");

                    b.HasIndex("ProductID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            DisplayName = "Dětská móda"
                        },
                        new
                        {
                            ID = 2,
                            DisplayName = "Kukly, čepice",
                            IdentifierName = "Čepice - Dětské",
                            ParentID = 1
                        },
                        new
                        {
                            ID = 3,
                            DisplayName = "Nákrčníky, slintáky",
                            IdentifierName = "Nákrčníky - Dětské",
                            ParentID = 1
                        },
                        new
                        {
                            ID = 4,
                            DisplayName = "Body, trička",
                            IdentifierName = "Body - Dětské",
                            ParentID = 1
                        },
                        new
                        {
                            ID = 5,
                            DisplayName = "Yogínky, turky",
                            ParentID = 1
                        },
                        new
                        {
                            ID = 6,
                            DisplayName = "Plenky",
                            ParentID = 1
                        },
                        new
                        {
                            ID = 7,
                            DisplayName = "AIO",
                            ParentID = 5
                        },
                        new
                        {
                            ID = 8,
                            DisplayName = "Novorozenecké",
                            IdentifierName = "Novorozenecké - AIO",
                            ParentID = 7
                        },
                        new
                        {
                            ID = 9,
                            DisplayName = "Jednovelikostní",
                            IdentifierName = "Jednovelikostní - AIO",
                            ParentID = 7
                        },
                        new
                        {
                            ID = 10,
                            DisplayName = "SIO",
                            ParentID = 5
                        },
                        new
                        {
                            ID = 11,
                            DisplayName = "Novorozenecké",
                            IdentifierName = "Novorozenecké - SIO",
                            ParentID = 10
                        },
                        new
                        {
                            ID = 12,
                            DisplayName = "Jednovelikostní",
                            IdentifierName = "Jednovelikostní - SIO",
                            ParentID = 10
                        },
                        new
                        {
                            ID = 13,
                            DisplayName = "Kalhotkové",
                            ParentID = 5
                        },
                        new
                        {
                            ID = 14,
                            DisplayName = "Novorozenecké",
                            IdentifierName = "Novorozenecké - Kalhotkové",
                            ParentID = 13
                        },
                        new
                        {
                            ID = 15,
                            DisplayName = "Jednovelikostní",
                            IdentifierName = "Jednovelikostní - Kalhotkové",
                            ParentID = 13
                        },
                        new
                        {
                            ID = 16,
                            DisplayName = "Svrchní",
                            ParentID = 6
                        },
                        new
                        {
                            ID = 17,
                            DisplayName = "Novorozenecké",
                            IdentifierName = "Novorozenecké - Svrchní",
                            ParentID = 16
                        },
                        new
                        {
                            ID = 18,
                            DisplayName = "Jednovelikostní",
                            IdentifierName = "Jednovelikostní - Svrchní",
                            ParentID = 16
                        },
                        new
                        {
                            ID = 19,
                            DisplayName = "Spodní prádlo",
                            IdentifierName = "Spodní prádlo - Dětské",
                            ParentID = 1
                        },
                        new
                        {
                            ID = 20,
                            DisplayName = "Dámská móda"
                        },
                        new
                        {
                            ID = 21,
                            DisplayName = "Čepice",
                            IdentifierName = "Čepice - Dámské",
                            ParentID = 20
                        },
                        new
                        {
                            ID = 22,
                            DisplayName = "Nákrčníky",
                            IdentifierName = "Nákrčníky - Dámské",
                            ParentID = 20
                        },
                        new
                        {
                            ID = 23,
                            DisplayName = "Tuniky, trička",
                            IdentifierName = "Tuniky, trička - Dámské",
                            ParentID = 20
                        },
                        new
                        {
                            ID = 24,
                            DisplayName = "Šaty",
                            ParentID = 20
                        },
                        new
                        {
                            ID = 25,
                            DisplayName = "Spodní prádlo",
                            IdentifierName = "Spodní prádlo - Dámské",
                            ParentID = 20
                        },
                        new
                        {
                            ID = 26,
                            DisplayName = "Pánská móda"
                        },
                        new
                        {
                            ID = 27,
                            DisplayName = "Čepice",
                            IdentifierName = "Čepice - Pánské",
                            ParentID = 26
                        },
                        new
                        {
                            ID = 28,
                            DisplayName = "Nákrčníky",
                            IdentifierName = "Nákrčníky - Pánské",
                            ParentID = 26
                        },
                        new
                        {
                            ID = 29,
                            DisplayName = "Trička",
                            IdentifierName = "Trička - Pánská",
                            ParentID = 26
                        },
                        new
                        {
                            ID = 30,
                            DisplayName = "Spodní prádlo",
                            IdentifierName = "Spodní prádlo - Pánské",
                            ParentID = 26
                        });
                });

            modelBuilder.Entity("EShop.Data.CategoryProduct", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("CategoryProducts");
                });

            modelBuilder.Entity("EShop.Data.ImagePath", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("ImagePaths");
                });

            modelBuilder.Entity("EShop.Data.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InStock")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("ID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("EShop.Data.ProductPath", b =>
                {
                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("PathID")
                        .HasColumnType("int");

                    b.HasKey("ProductID", "PathID");

                    b.HasIndex("PathID");

                    b.ToTable("ProductPaths");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "ADMIN",
                            ConcurrencyStamp = "f50dd2e4-bb8f-49bf-86b7-add2b2b6eb70",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "USER",
                            ConcurrencyStamp = "ed07e4e3-7323-4dd8-9d16-0cbed2c1726e",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "VELKOOBCHOD",
                            ConcurrencyStamp = "fde178b0-3459-4b00-aba0-96f1ec569caf",
                            Name = "Velkoobchod",
                            NormalizedName = "VELKOOBCHOD"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "ADMINISTRATOR",
                            RoleId = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("EShop.Data.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("BCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BPostalCode")
                        .HasColumnType("int");

                    b.Property<string>("BStreetName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DPostalCode")
                        .HasColumnType("int");

                    b.Property<string>("DStreetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "ADMINISTRATOR",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "750a38cf-5268-43a9-a73f-6af6f644ee16",
                            Email = "teascreate@seznam.cz",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEASCREATE@SEZNAM.CZ",
                            NormalizedUserName = "ADMINISTRATOR",
                            PasswordHash = "AQAAAAEAACcQAAAAEOwmIgtrPQs+6LVfB2+Jq9XgREVDK7mrd5ZJ4sB0eI/K4nuYUGETjd/UV9gUXoK5vQ==",
                            PhoneNumber = "Empty",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "Administrator",
                            BPostalCode = 0,
                            DCity = "Empty",
                            DPostalCode = 0,
                            DStreetName = "Empty",
                            FirstName = "Empty",
                            LastName = "Empty",
                            Points = 0
                        });
                });

            modelBuilder.Entity("EShop.Data.Category", b =>
                {
                    b.HasOne("EShop.Data.Category", "Parent")
                        .WithMany("Subcategories")
                        .HasForeignKey("ParentID");

                    b.HasOne("EShop.Data.Product", null)
                        .WithMany("CategoryProducts")
                        .HasForeignKey("ProductID");
                });

            modelBuilder.Entity("EShop.Data.CategoryProduct", b =>
                {
                    b.HasOne("EShop.Data.Category", "Category")
                        .WithMany("CategoryProducts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EShop.Data.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EShop.Data.ProductPath", b =>
                {
                    b.HasOne("EShop.Data.ImagePath", "Path")
                        .WithMany("ProductPaths")
                        .HasForeignKey("PathID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EShop.Data.Product", "Product")
                        .WithMany("ProductPaths")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
